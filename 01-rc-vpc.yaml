# Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with the License. 
# A copy of the License is located at
#    http://aws.amazon.com/apache2.0/
# or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
# either express or implied. See the License for the specific language governing permissions and limitations under the License.

AWSTemplateFormatVersion: '2010-09-09'
Description: This CloudFormation Template creates the VPC, subnets, routing, NAT Gateways, security groups and IAM Roles to support REDCap.

Parameters:
  AccessCidr:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Description: The CIDR IP range that is permitted to SSH to bastion instance. Note - a value of 0.0.0.0/0 will allow access from ANY IP address.
    Type: String
    Default: 0.0.0.0/0
  RedcapS3Bucket:
    Description: "S3 bucket that contains your REDCap binary file"
    Type: String
    Default: redcap-test
  UseACMBoolean:
    AllowedValues:
      - true
      - false
    Default: true
    Description: Specifies whether an SSL certificate should be generated for your domain name using AWS Certificate Manager (ACM).  If one is not generated, HTTP will be used and an SSL certificate can be applied after deployment.
    Type: String
  UseRoute53Boolean:
    AllowedValues:
      - true
      - false
    Default: true
    Description: Specifies whether a record set should be created in Route 53 for your REDCap domain name.  If not, you will recieve a default Elastic Beanstalk DNS name (e.g. redcap.us-east-1.elasticbeanstalk.com).
    Type: String

  VPCcidr:
    Description: (optional to change) CIDR IP Range for your REDCap VPC.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Type: String
    Default: 10.105.32.0/20
  p1cidr:
    Description: (optional to change) CIDR IP Range for the public subnet in AZ 'a' of your REDCap VPC.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Type: String
    Default: 10.105.34.0/24
  p2cidr:
    Description: (optional to change) CIDR IP Range for the public subnet in AZ 'b' of your REDCap VPC.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Type: String
    Default: 10.105.35.0/24
  a1cidr:
    Description: (optional to change) CIDR IP Range for the application subnet in AZ 'a' of your REDCap VPC.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Type: String
    Default: 10.105.36.0/24
  a2cidr:
    Description: (optional to change) CIDR IP Range for the application subnet in AZ 'b' of your REDCap VPC.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Type: String
    Default: 10.105.37.0/24
  d1cidr:
    Description: (optional to change) CIDR IP Range for the database subnet in AZ 'a' of your REDCap VPC.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Type: String
    Default: 10.105.38.0/24
  d2cidr:
    Description: (optional to change) CIDR IP Range for the database subnet in AZ 'b' of your REDCap VPC.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Type: String
    Default: 10.105.39.0/24
  GWLB1CIDR:
    Description: (optional to change) CIDR IP Range for the GWLB subnet in AZ 'a' of your REDCap VPC.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Type: String
    Default: 10.105.32.0/24
  GWLB2CIDR:
    Description: (optional to change) CIDR IP Range for the GWLB subnet in AZ 'b' of your REDCap VPC.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Type: String
    Default: 10.105.33.0/24    
  EBEndpoint:
    AllowedPattern: ^([a-zA-Z0-9-])*$
    Description: '[ REQUIRED ] The unique name to use for your Elastic Beanstalk URL (will be rendered http://(EBEndpoint).(region).elasticbeanstalk.com).  You can use the "nslookup" to see if an endpoint is in use.'
    ConstraintDescription: 'This name must be between 4 and 40 characters and contain only letters, numbers, and/or a hyphen'
    MaxLength: 40
    MinLength: 4    
    Type: String

  VpcEndpointService:
    Description: VPC Endpoint Service for REDCap account
    Type: String
    Default: vpce-svc-04c4882b05a462f15





Conditions:    
  DeployRoute53: 
    !Equals [ true, !Ref UseRoute53Boolean ]
  DeployACM: !And 
    - !Equals [ true, !Ref UseACMBoolean ]
    - !Condition DeployRoute53
  NoDeployACM: !Or
    - !Equals [ false, !Ref UseACMBoolean ]
    - !Equals [ false, !Ref UseRoute53Boolean ]

Resources:
  REDCapVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCcidr
      InstanceTenancy: default
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'false'
      Tags:
        - Key: Name
          Value: !Sub ${EBEndpoint}-vpc
        - Key: Owner
          Value: David.Scozzaro@lmu.edu
        - Key: Team
          Value: ResearchEducation
        - Key: ApplicationName
          Value: !Sub ${EBEndpoint}
        - Key: InfrastructureFunction
          Value: !Sub ${EBEndpoint}-vpc          


#Defines Internet Connectivity
  REDCapIGw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EBEndpoint}-igw
        - Key: Owner
          Value: David.Scozzaro@lmu.edu
        - Key: Team
          Value: ResearchEducation
        - Key: ApplicationName
          Value: !Sub ${EBEndpoint}
        - Key: InfrastructureFunction
          Value: !Sub ${EBEndpoint}-igw

  REDCapGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'REDCapVPC'
      InternetGatewayId: !Ref 'REDCapIGw'

#Defines NAT Gateway so that the Elastic Beanstalk servers and the temporary EC2 server can talk to the Internet
  NAT:
    DependsOn: REDCapGWAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'EIP.AllocationId'
      SubnetId: !Ref 'REDCapPublicASubnet'
      Tags:      
        - Key: Name
          Value: !Sub ${EBEndpoint}-nat-gw
        - Key: Owner
          Value: David.Scozzaro@lmu.edu
        - Key: Team
          Value: ResearchEducation
        - Key: ApplicationName
          Value: !Sub ${EBEndpoint}
        - Key: InfrastructureFunction
          Value: !Sub ${EBEndpoint}-nat-gw     

  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:      
        - Key: Name
          Value: !Sub ${EBEndpoint}-eip
        - Key: Owner
          Value: David.Scozzaro@lmu.edu
        - Key: Team
          Value: ResearchEducation
        - Key: ApplicationName
          Value: !Sub ${EBEndpoint}
        - Key: InfrastructureFunction
          Value: !Sub ${EBEndpoint}-eip

  #Defines two availability zones of subnets for the three tier network architecture

  REDCapDataASubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref d1cidr
      AvailabilityZone: !Join [ "", [ !Ref 'AWS::Region', "a" ] ]
      VpcId: !Ref REDCapVPC
      Tags:
        - Key: Name
          Value: !Sub ${EBEndpoint} Data A
        - Key: Owner
          Value: David.Scozzaro@lmu.edu
        - Key: Team
          Value: ResearchEducation
        - Key: ApplicationName
          Value: !Sub ${EBEndpoint}
        - Key: InfrastructureFunction
          Value: !Sub ${EBEndpoint}-subnet-data-a  
  REDCapDataBSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref d2cidr
      AvailabilityZone: !Join [ "", [ !Ref 'AWS::Region', "b" ] ]
      VpcId: !Ref REDCapVPC
      Tags:
        - Key: Name
          Value: !Sub ${EBEndpoint} Data B
        - Key: Owner
          Value: David.Scozzaro@lmu.edu
        - Key: Team
          Value: ResearchEducation
        - Key: ApplicationName
          Value: !Sub ${EBEndpoint}
        - Key: InfrastructureFunction
          Value: !Sub ${EBEndpoint}-subnet-data-b  

  REDCapAppASubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref a1cidr
      AvailabilityZone: !Join [ "", [ !Ref 'AWS::Region', "a" ] ]
      VpcId: !Ref REDCapVPC
      Tags:
        - Key: Name
          Value: !Sub ${EBEndpoint} App A
        - Key: Owner
          Value: David.Scozzaro@lmu.edu
        - Key: Team
          Value: ResearchEducation
        - Key: ApplicationName
          Value: !Sub ${EBEndpoint}
        - Key: InfrastructureFunction
          Value: !Sub ${EBEndpoint}-subnet-app-a   
  REDCapAppBSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref a2cidr
      AvailabilityZone: !Join [ "", [ !Ref 'AWS::Region', "b" ] ]
      VpcId: !Ref REDCapVPC
      Tags:
        - Key: Name
          Value: !Sub ${EBEndpoint} App B
        - Key: Owner
          Value: David.Scozzaro@lmu.edu
        - Key: Team
          Value: ResearchEducation
        - Key: ApplicationName
          Value: !Sub ${EBEndpoint}
        - Key: InfrastructureFunction
          Value: !Sub ${EBEndpoint}-subnet-app-b         
            
         
  REDCapPublicASubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref p1cidr
      AvailabilityZone: !Join [ "", [ !Ref 'AWS::Region', "a" ] ]
      MapPublicIpOnLaunch: True
      VpcId: !Ref REDCapVPC
      Tags:
        - Key: Name
          Value: !Sub ${EBEndpoint} Public A
        - Key: Owner
          Value: David.Scozzaro@lmu.edu
        - Key: Team
          Value: ResearchEducation
        - Key: ApplicationName
          Value: !Sub ${EBEndpoint}
        - Key: InfrastructureFunction
          Value: !Sub ${EBEndpoint}-subnet-public-a          
  REDCapPublicBSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref p2cidr
      AvailabilityZone: !Join [ "", [ !Ref 'AWS::Region', "b" ] ]
      MapPublicIpOnLaunch: True
      VpcId: !Ref REDCapVPC
      Tags:
        - Key: Name
          Value: !Sub ${EBEndpoint} Public B
        - Key: Owner
          Value: David.Scozzaro@lmu.edu
        - Key: Team
          Value: ResearchEducation
        - Key: ApplicationName
          Value: !Sub ${EBEndpoint}
        - Key: InfrastructureFunction
          Value: !Sub ${EBEndpoint}-subnet-public-b
          
  REDCapGWLBASubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref GWLB1CIDR
      AvailabilityZone: !Join [ "", [ !Ref 'AWS::Region', "a" ] ]
      MapPublicIpOnLaunch: True
      VpcId: !Ref REDCapVPC
      Tags:
        - Key: Name
          Value: !Sub ${EBEndpoint} GWLB A
        - Key: Owner
          Value: David.Scozzaro@lmu.edu
        - Key: Team
          Value: ResearchEducation
        - Key: ApplicationName
          Value: !Sub ${EBEndpoint}
        - Key: InfrastructureFunction
          Value: !Sub ${EBEndpoint}-subnet-gwlb-a          
  REDCapGWLBBSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref GWLB2CIDR
      AvailabilityZone: !Join [ "", [ !Ref 'AWS::Region', "b" ] ]
      MapPublicIpOnLaunch: True
      VpcId: !Ref REDCapVPC
      Tags:
        - Key: Name
          Value: !Sub ${EBEndpoint} GWLB B
        - Key: Owner
          Value: David.Scozzaro@lmu.edu
        - Key: Team
          Value: ResearchEducation
        - Key: ApplicationName
          Value: !Sub ${EBEndpoint}
        - Key: InfrastructureFunction
          Value: !Sub ${EBEndpoint}-subnet-bwlb-b               
  


#Security Groups for the three tiered network architecture
  PublicSGSSL:
    Condition: DeployACM
    DependsOn: EIP
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Load Balancers
      VpcId: !Ref REDCapVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Ref 'AccessCidr'
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Ref 'AccessCidr'
      Tags:
        - Key: Name
          Value: !Sub ${EBEndpoint} Public Security Group
        - Key: Owner
          Value: David.Scozzaro@lmu.edu
        - Key: Team
          Value: ResearchEducation
        - Key: ApplicationName
          Value: !Sub ${EBEndpoint}
        - Key: InfrastructureFunction
          Value: !Sub ${EBEndpoint}-public-sg             

  PublicSGNoSSL:
    Condition: NoDeployACM
    DependsOn: EIP
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Load Balancers
      VpcId: !Ref 'REDCapVPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Ref 'AccessCidr'
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Ref 'AccessCidr'
      Tags:
        - Key: Name
          Value: !Sub ${EBEndpoint} Public Security Group
        - Key: Owner
          Value: David.Scozzaro@lmu.edu
        - Key: Team
          Value: ResearchEducation
        - Key: ApplicationName
          Value: !Sub ${EBEndpoint}
        - Key: InfrastructureFunction
          Value: !Sub ${EBEndpoint}-public-sg

  AppSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Application Servers
      VpcId: !Ref 'REDCapVPC'
      Tags:
        - Key: Name
          Value: !Sub ${EBEndpoint} App Security Group
        - Key: Owner
          Value: David.Scozzaro@lmu.edu
        - Key: Team
          Value: ResearchEducation
        - Key: ApplicationName
          Value: !Sub ${EBEndpoint}
        - Key: InfrastructureFunction
          Value: !Sub ${EBEndpoint}-app-sg

  DataSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Databases
      VpcId: !Ref 'REDCapVPC'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        SourceSecurityGroupId: !Ref 'AppSG'
      Tags:
        - Key: Name
          Value: !Sub ${EBEndpoint} DB Security Group
        - Key: Owner
          Value: David.Scozzaro@lmu.edu
        - Key: Team
          Value: ResearchEducation
        - Key: ApplicationName
          Value: !Sub ${EBEndpoint}
        - Key: InfrastructureFunction
          Value: !Sub ${EBEndpoint}-db-sg            


  
#Route tables and route definitions for the three tiered network architecture
  REDCapPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'REDCapPrivateRouteTable'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'NAT'

  REDCapPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'REDCapVPC'
      Tags:
        - Key: Name
          Value: !Sub ${EBEndpoint} Private
        - Key: Owner
          Value: David.Scozzaro@lmu.edu
        - Key: Team
          Value: ResearchEducation
        - Key: ApplicationName
          Value: !Sub ${EBEndpoint}
        - Key: InfrastructureFunction
          Value: !Sub ${EBEndpoint}-private-routetable              

  REDCapDataSubnetARoute:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'REDCapPrivateRouteTable'
      SubnetId: !Ref 'REDCapDataASubnet'

  REDCapDataSubnetBRoute:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'REDCapPrivateRouteTable'
      SubnetId: !Ref 'REDCapDataBSubnet'      

  REDCapAppSubnetARoute:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'REDCapPrivateRouteTable'
      SubnetId: !Ref 'REDCapAppASubnet'   

  REDCapAppSubnetBRoute:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'REDCapPrivateRouteTable'
      SubnetId: !Ref 'REDCapAppBSubnet'             


  REDCapPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref 'REDCapPublicRouteTable'
      GatewayId: !Ref 'REDCapIGw'
    DependsOn: REDCapGWAttachment         

  REDCapPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'REDCapVPC'
      Tags:
        - Key: Name
          Value: !Sub ${EBEndpoint} Public
        - Key: Owner
          Value: David.Scozzaro@lmu.edu
        - Key: Team
          Value: ResearchEducation
        - Key: ApplicationName
          Value: !Sub ${EBEndpoint}
        - Key: InfrastructureFunction
          Value: !Sub ${EBEndpoint}-public-routetable            

  REDCapPublicSubnetARoute:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'REDCapPublicRouteTable'
      SubnetId: !Ref 'REDCapPublicASubnet'          

  REDCapPublicSubnetBRoute:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'REDCapPublicRouteTable'
      SubnetId: !Ref 'REDCapPublicBSubnet'

# GWLB routes and route tables      

  REDCapGWLBRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref 'REDCapGWLBRouteTable'
      GatewayId: !Ref 'REDCapIGw'
    DependsOn: REDCapGWAttachment         

  REDCapGWLBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'REDCapVPC'
      Tags:
        - Key: Name
          Value: !Sub ${EBEndpoint} GWLB
        - Key: Owner
          Value: David.Scozzaro@lmu.edu
        - Key: Team
          Value: ResearchEducation
        - Key: ApplicationName
          Value: !Sub ${EBEndpoint}
        - Key: InfrastructureFunction
          Value: !Sub ${EBEndpoint}-public-routetable            

  REDCapGWLBSubnetARoute:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'REDCapGWLBRouteTable'
      SubnetId: !Ref 'REDCapGWLBASubnet'          

  REDCapGWLBSubnetBRoute:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'REDCapGWLBRouteTable'
      SubnetId: !Ref 'REDCapGWLBBSubnet'      

# GWLB Endpoints

  GwlbEndpoint1:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref REDCapVPC
      ServiceName: !Join
        - ''
        - - !If [IsChina, cn.com.amazonaws, com.amazonaws]
          - .vpce.
          - !Ref "AWS::Region"
          - .
          - !Ref VpcEndpointService
      VpcEndpointType: GatewayLoadBalancer
      SubnetIds:
        - !Ref REDCapGWLBASubnet

  GwlbEndpoint2:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref REDCapVPC
      ServiceName: !Join
        - ''
        - - !If [IsChina, cn.com.amazonaws, com.amazonaws]
          - .vpce.
          - !Ref "AWS::Region"
          - .
          - !Ref VpcEndpointService
      VpcEndpointType: GatewayLoadBalancer
      SubnetIds:
        - !Ref REDCapGWLBBSubnet



#Elastic Beanstalk IAM Roles
  ServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: elasticbeanstalk.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': elasticbeanstalk
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'elasticloadbalancing:DescribeInstanceHealth'
                  - 'elasticloadbalancing:DescribeLoadBalancers'
                  - 'elasticloadbalancing:DescribeTargetHealth'
                  - 'ec2:DescribeInstances'
                  - 'ec2:DescribeInstanceStatus'
                  - 'ec2:GetConsoleOutput'
                  - 'ec2:AssociateAddress'
                  - 'ec2:DescribeAddresses'
                  - 'ec2:DescribeSecurityGroups'
                  - 'sqs:GetQueueAttributes'
                  - 'sqs:GetQueueUrl'
                  - 'autoscaling:DescribeAutoScalingGroups'
                  - 'autoscaling:DescribeAutoScalingInstances'
                  - 'autoscaling:DescribeScalingActivities'
                  - 'autoscaling:DescribeNotificationConfigurations'
                Resource:
                  - '*'
      Path: /
      Tags:      
        - Key: Name
          Value: !Sub ${EBEndpoint}-service-role
        - Key: Owner
          Value: David.Scozzaro@lmu.edu
        - Key: Team
          Value: ResearchEducation
        - Key: ApplicationName
          Value: !Sub ${EBEndpoint}
        - Key: InfrastructureFunction
          Value: !Sub ${EBEndpoint}-service-role          

  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref InstanceProfileRole
  InstanceProfileRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: BucketAccess
                Action:
                  - 's3:*'
                Effect: Allow
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws'
                      - ':s3:::elasticbeanstalk-*-'
                      - !Ref 'AWS::AccountId'
                  - !Join 
                    - ''
                    - - 'arn:aws'
                      - ':s3:::elasticbeanstalk-*-'
                      - !Ref 'AWS::AccountId'
                      - /*
                  - !Join 
                    - ''
                    - - 'arn:aws'
                      - ':s3:::elasticbeanstalk-*-'
                      - !Ref 'AWS::AccountId'
                      - '-*'
                  - !Join 
                    - ''
                    - - 'arn:aws'
                      - ':s3:::elasticbeanstalk-*-'
                      - !Ref 'AWS::AccountId'
                      - '-*/*'
                  - !Join 
                    - ''
                    - - 'arn:aws'
                      - ':s3:::cf-templates-*'
                      - !Ref 'AWS::AccountId'
                  - !Join 
                    - ''
                    - - 'arn:aws'
                      - ':s3:::cf-templates-*'
                      - !Ref 'AWS::AccountId'
                      - '/*'
                  - !Join [ "", [ 'arn:aws:s3:::', !Ref "AWS::AccountId", '-', !Select [ 1, !Split [ '-', !Ref 'REDCapPublicASubnet'] ], '-redcapebapp' ] ]
                  - !Join [ "", [ 'arn:aws:s3:::', !Ref "AWS::AccountId", '-', !Select [ 1, !Split [ '-', !Ref 'REDCapPublicASubnet'] ], '-redcapebapp', '/*' ] ]
                  - !Join [ "", [ 'arn:aws:s3:::', !Ref "AWS::AccountId", '-', !Select [ 1, !Split [ '-', !Ref 'REDCapGWLBASubnet'] ], '-redcapebapp' ] ]
                  - !Join [ "", [ 'arn:aws:s3:::', !Ref "AWS::AccountId", '-', !Select [ 1, !Split [ '-', !Ref 'REDCapGWLBASubnet'] ], '-redcapebapp', '/*' ] ]
              - Sid: MetricsAccess
                Action:
                  - 'cloudwatch:PutMetricData'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: '*'
              - Sid: SSMAccess
                Action:
                  - 'ssm:PutParameter'
                  - 'ssm:GetParameter'
                Effect: Allow
                Resource: 'arn:aws:ssm:*:*:parameter/redcap-salt'
              - Sid: EncryptedEBS
                Action:
                  - 'ec2:CreateVolume'
                  - 'ec2:AttachVolume'
                  - 'ec2:ModifyInstanceAttribute'
                  - "ec2:Describe*"
                Effect: Allow
                Resource: '*'
              - Sid: CreateNewEBVersion
                Action:
                  - 'elasticbeanstalk:RetrieveEnvironmentInfo'
                  - "elasticbeanstalk:DescribeEnvironments"
                  - "elasticbeanstalk:DescribeEvents"
                  - "elasticbeanstalk:DescribeConfigurationOptions"
                  - "elasticbeanstalk:DescribeInstancesHealth"
                  - "elasticbeanstalk:DescribeApplicationVersions"
                  - "elasticbeanstalk:DescribeEnvironmentHealth"
                  - "elasticbeanstalk:DescribeApplications"
                  - "elasticbeanstalk:ListPlatformVersions"
                  - "elasticbeanstalk:DescribeEnvironmentResources"
                  - "elasticbeanstalk:DescribeEnvironmentManagedActions"
                  - "elasticbeanstalk:RequestEnvironmentInfo"
                  - "elasticbeanstalk:DescribeEnvironmentManagedActionHistory"
                  - "elasticbeanstalk:CreateApplicationVersion"
                  - "elasticbeanstalk:ValidateConfigurationSettings"
                  - "elasticbeanstalk:DescribeConfigurationSettings"
                  - "elasticbeanstalk:CheckDNSAvailability"
                  - "elasticbeanstalk:ListAvailableSolutionStacks"
                  - "elasticbeanstalk:DescribePlatformVersion"
                  - "elasticbeanstalk:UpdateEnvironment"
                  - "elasticbeanstalk:PutInstanceStatistics"
                  - "cloudformation:GetTemplate"
                  - 'cloudformation:DescribeStackResources'
                  - 'cloudformation:DescribeStackResource'
                  - 'cloudformation:UpdateStack'
                  - "cloudformation:DescribeStacks"
                  - "cloudformation:DescribeStackEvents"
                  - "autoscaling:DescribeAutoScalingGroups"
                  - "autoscaling:SuspendProcesses"
                  - "autoscaling:DescribeScalingActivities"
                  - "autoscaling:ResumeProcesses"
                  - "autoscaling:DescribeLaunchConfigurations"
                  - "elasticloadbalancing:DescribeTargetGroups"
                  - "elasticloadbalancing:RegisterTargets"
                  - "elasticloadbalancing:DescribeLoadBalancers"
                Effect: Allow
                Resource: '*'
      Path: /
      Tags:      
        - Key: Name
          Value: !Sub ${EBEndpoint}-instance-role
        - Key: Owner
          Value: David.Scozzaro@lmu.edu
        - Key: Team
          Value: ResearchEducation
        - Key: ApplicationName
          Value: !Sub ${EBEndpoint}
        - Key: InfrastructureFunction
          Value: !Sub ${EBEndpoint}-instance-role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "Allowed for REDCap"            





#IAM Roles for the temporary EC2 server to inject the ebextenstions files in to the REDCap source package.
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Tags:      
        - Key: Name
          Value: !Sub ${EBEndpoint}-ec2-ssm-role
        - Key: Owner
          Value: David.Scozzaro@lmu.edu
        - Key: Team
          Value: ResearchEducation
        - Key: ApplicationName
          Value: !Sub ${EBEndpoint}
        - Key: InfrastructureFunction
          Value: !Sub ${EBEndpoint}-ec2-ssm-role           
  EC2RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: root
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: 
              - "s3:*"
              - "cloudformation:DescribeStackResources"
              - "cloudformation:DescribeStackResource"
            Resource: 
              - !Join [ "", [ 'arn:aws:s3:::', !Ref RedcapS3Bucket ] ]
              - !Join [ "", [ 'arn:aws:s3:::', !Ref RedcapS3Bucket, '/*' ] ]              
              - !Join [ "", [ 'arn:aws:s3:::', !Ref "AWS::AccountId", '-', !Select [ 1, !Split [ '-', !Ref 'REDCapPublicASubnet'] ], '-redcapebapp' ] ]
              - !Join [ "", [ 'arn:aws:s3:::', !Ref "AWS::AccountId", '-', !Select [ 1, !Split [ '-', !Ref 'REDCapPublicASubnet'] ], '-redcapebapp', '/*' ] ]
              - !Join [ "", [ 'arn:aws:s3:::', !Ref "AWS::AccountId", '-', !Select [ 1, !Split [ '-', !Ref 'REDCapPublicASubnet'] ], '-redcaprepository' ] ]
              - !Join [ "", [ 'arn:aws:s3:::', !Ref "AWS::AccountId", '-', !Select [ 1, !Split [ '-', !Ref 'REDCapPublicASubnet'] ], '-redcaprepository', '/*' ] ]
              - !Join [ "", [ 'arn:aws:s3:::', !Ref "AWS::AccountId", '-', !Select [ 1, !Split [ '-', !Ref 'REDCapGWLBASubnet'] ], '-redcapebapp' ] ]
              - !Join [ "", [ 'arn:aws:s3:::', !Ref "AWS::AccountId", '-', !Select [ 1, !Split [ '-', !Ref 'REDCapGWLBASubnet'] ], '-redcapebapp', '/*' ] ]
              - !Join [ "", [ 'arn:aws:s3:::', !Ref "AWS::AccountId", '-', !Select [ 1, !Split [ '-', !Ref 'REDCapGWLBASubnet'] ], '-redcaprepository' ] ]
              - !Join [ "", [ 'arn:aws:s3:::', !Ref "AWS::AccountId", '-', !Select [ 1, !Split [ '-', !Ref 'REDCapGWLBASubnet'] ], '-redcaprepository', '/*' ] ]              
          - Effect: Allow
            Action:
              - "elasticbeanstalk:ListAvailableSolutionStacks"
            Resource:
              - '*'
          - Effect: Allow
            Action: 
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'logs:DescribeLogStreams'
            Resource: 'arn:aws:logs:*:*:*'
      Roles:
        - !Ref 'EC2Role'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: "Allowed for REDCap"        
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'EC2Role'

     

  # '${AWS::AccountId}-${subnetpublica}-redcaprepository'
  #IAM User and Access/Secret Key to be used by REDCap to access S3 as a File Repository
  REDCapUser:
    Type: AWS::IAM::User
    Properties:
      Policies:
      - PolicyName: S3Access
        PolicyDocument:
          Statement:
            - Effect: Allow
              Action: 
                - "s3:*"
              Resource: 
              - !Join [ "", [ 'arn:aws:s3:::', !Ref "AWS::AccountId", '-', !Select [ 1, !Split [ '-', !Ref 'REDCapPublicASubnet'] ], '-redcaprepository' ] ]
              - !Join [ "", [ 'arn:aws:s3:::', !Ref "AWS::AccountId", '-', !Select [ 1, !Split [ '-', !Ref 'REDCapPublicASubnet'] ], '-redcaprepository', '/*' ] ]
              - !Join [ "", [ 'arn:aws:s3:::', !Ref "AWS::AccountId", '-', !Select [ 1, !Split [ '-', !Ref 'REDCapGWLBASubnet'] ], '-redcaprepository' ] ]
              - !Join [ "", [ 'arn:aws:s3:::', !Ref "AWS::AccountId", '-', !Select [ 1, !Split [ '-', !Ref 'REDCapGWLBASubnet'] ], '-redcaprepository', '/*' ] ]
      Tags:      
        - Key: Name
          Value: !Sub ${EBEndpoint}-user
        - Key: Owner
          Value: David.Scozzaro@lmu.edu
        - Key: Team
          Value: ResearchEducation
        - Key: ApplicationName
          Value: !Sub ${EBEndpoint}
        - Key: InfrastructureFunction
          Value: !Sub ${EBEndpoint}-user                 
  REDCapAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName:
        !Ref REDCapUser
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F10
            reason: "Generally LMU allows hosts to access whatever site is needed"
          - id: F2000
            reason: "Names should be static so they can be used in other templates"           

  # Lambda to clean up Default Security Group per AWS - https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html#ec2-2
  # Custom resource
  REDCapCleanUpDefaultSG:
    DependsOn: REDCapCleanUpDefaultSGFunctionLogGroup
    Type: Custom::CleanUpDefaultSG
    Properties:
      ServiceToken: !GetAtt REDCapCleanUpDefaultSGFunction.Arn
      DefaultSG: !GetAtt REDCapVPC.DefaultSecurityGroup

  # Lambda Function
  REDCapCleanUpDefaultSGFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      FunctionName: !Sub "REDCap-lambda-cleanupdefaultsg-${REDCapVPC}"
      Description: Cleans up default security group and tags it
      Runtime: python3.9
      Timeout: 300
      Role: !GetAtt REDCapCleanUpDefaultSGFunctionRole.Arn
      Layers:
        - "arn:aws:lambda:us-west-2:905652290449:layer:LMUBaseline-python-library:5"      
      Code:
        ZipFile: |
          import boto3 
          import json 
          import os
          import logging
          from crhelper import CfnResource

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          helper = CfnResource()

          VPC_NAME = os.environ['vpc_name']

          # boto3 client 
          client = boto3.client('ec2') 

          @helper.create
          @helper.update

          def create_update(event, context):
              default_sg = event["ResourceProperties"]["DefaultSG"]
              logger.info("Default security group id is:{}".format(default_sg)) 
              try:
                  response = client.revoke_security_group_egress(
                      GroupId=default_sg,
                      IpPermissions=[
                          {
                              'IpProtocol': '-1',
                              'IpRanges': [
                                  {
                                      'CidrIp': '0.0.0.0/0'
                                  }
                              ]
                          }
                      ]        
                  )
              except Exception as e: 
                  logger.error("Not able to revoke egress rule due to the following error: {}".format(e)) 
                  raise
              try:
                  response = client.revoke_security_group_ingress(
                      GroupId=default_sg,
                      IpPermissions=[
                          {
                              'IpProtocol': '-1',
                              'UserIdGroupPairs': [
                                  {
                                      'GroupId': default_sg
                                  }
                              ]
                          }
                      ]
                  )    
              except Exception as e: 
                  logger.error("Not able to revoke ingress rule due to the following error: {}".format(e)) 
                  raise
              
              logger.info("Egress and Ingress rules have been deleted")

          @helper.delete
          def no_op(_, __):
              pass

          def lambda_handler(event, context):
              helper(event, context)
      Environment:
        Variables:
          vpc_name: !Ref REDCapVPC
      Tags:      
        - Key: Name
          Value: !Sub ${EBEndpoint}-sg-cleanup-lambda
        - Key: Owner
          Value: David.Scozzaro@lmu.edu
        - Key: Team
          Value: ResearchEducation
        - Key: ApplicationName
          Value: !Sub ${EBEndpoint}
        - Key: InfrastructureFunction
          Value: !Sub ${EBEndpoint}-sg-cleanup-lambda            
 

  REDCapCleanUpDefaultSGFunctionLogGroup:
    DependsOn: REDCapCleanUpDefaultSGFunction
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${REDCapCleanUpDefaultSGFunction}
      RetentionInDays: 30
      Tags:      
        - Key: Name
          Value: !Sub ${EBEndpoint}-sg-cleanup-loggroup
        - Key: Owner
          Value: David.Scozzaro@lmu.edu
        - Key: Team
          Value: ResearchEducation
        - Key: ApplicationName
          Value: !Sub ${EBEndpoint}
        - Key: InfrastructureFunction
          Value: !Sub ${EBEndpoint}-sg-cleanup-loggroup         

  # Lambda Function Role
  REDCapCleanUpDefaultSGFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "REDCap-role-cleanupdefaultsg-${REDCapVPC}-${AWS::Region}"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Sid: LambdaAccess
          Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "REDCap-policy-cleanupdefaultsg-${REDCapVPC}-${AWS::Region}"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              - Effect: Allow
                Action:
                  - ec2:RevokeSecurityGroupEgress
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:CreateTags
                Resource: !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/${REDCapVPC.DefaultSecurityGroup}"
      Tags:      
        - Key: Name
          Value: !Sub ${EBEndpoint}-sg-cleanup-role
        - Key: Owner
          Value: David.Scozzaro@lmu.edu
        - Key: Team
          Value: ResearchEducation
        - Key: ApplicationName
          Value: !Sub ${EBEndpoint}
        - Key: InfrastructureFunction
          Value: !Sub ${EBEndpoint}-sg-cleanup-role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "Names should be static so they can be used in other templates"
           




#Return the created resources to the Master template
Outputs:
  VPCId:
    Value: !Ref 'REDCapVPC'
  SubnetPublicA:
    Value: !Ref 'REDCapPublicASubnet'
  SubnetPublicB:
    Value: !Ref 'REDCapPublicBSubnet'
  SubnetAppA:
    Value: !Ref 'REDCapAppASubnet'
  SubnetAppB:
    Value: !Ref 'REDCapAppBSubnet'
  SubnetDataA:
    Value: !Ref 'REDCapDataASubnet'
  SubnetDataB:
    Value: !Ref 'REDCapDataBSubnet'
  SubnetGWLBA:
    Value: !Ref 'REDCapGWLBASubnet'
  SubnetGWLBB:
    Value: !Ref 'REDCapGWLBBSubnet'    
  SGPublic:
    Value: !If [ DeployACM, !Ref 'PublicSGSSL', !Ref 'PublicSGNoSSL' ]
  SGApp:
    Value: !Ref 'AppSG'
  SGData:
    Value: !Ref 'DataSG'
  EBServiceRole:
    Value: !Ref 'ServiceRole'
  EBInstanceProfile:
    Value: !Ref 'InstanceProfile'
  TempEC2InstanceProfile:
    Value: !Ref 'EC2InstanceProfile'
  S3AccessKey:
    Value: !Ref REDCapAccessKey
  S3SecretKey:
    Value: !GetAtt REDCapAccessKey.SecretAccessKey